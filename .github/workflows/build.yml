name: Build

on:
  push:
    tags:
      - "v*"
      - test-release

env:
  CARGO_TERM_COLOR: always
  TARGET_DIR: target_ci

jobs:
  build:
    name: Build for ${{ matrix.platform.os_name }}
    runs-on: ${{ matrix.platform.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        platform:
          - os_name: Linux-amd64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin: octa
            name: octa-Linux-amd64.tar.gz
            cargo_command: cargo

          - os_name: Windows-amd64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: octa.exe
            name: octa-Windows-amd64.zip
            cargo_command: cargo

          - os_name: macOS-aarch64
            os: macOS-latest
            target: aarch64-apple-darwin
            bin: octa
            name: octa-Darwin-aarch64.tar.gz
            cargo_command: cargo

          - os_name: macOS-x86_64
            os: macOS-latest
            target: x86_64-apple-darwin
            bin: octa
            name: octa-Darwin-x86_64.tar.gz
            cargo_command: cargo
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Build binary (*nix)
        shell: bash
        run: |
          ${{ matrix.platform.cargo_command }} build --locked --release --target ${{ matrix.platform.target }}
        if: ${{ !contains(matrix.platform.os, 'windows') }}

      - name: Build binary (Windows)
        # We have to use the platform's native shell. If we use bash on
        # Windows then OpenSSL complains that the Perl it finds doesn't use
        # the platform's native paths and refuses to build.
        shell: powershell
        run: |
          & ${{ matrix.platform.cargo_command }} build --locked --release --target ${{ matrix.platform.target }}
        if: contains(matrix.platform.os, 'windows')

      - name: Strip binary
        shell: bash
        run: |
          strip target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}
        # strip doesn't work with cross-arch binaries on Linux or Windows.
        if: ${{ !(matrix.platform.target == 'aarch64-pc-windows-msvc') }}

      - name: Package as archive
        shell: bash
        run: |
          cd target/${{ matrix.platform.target }}/release
          mkdir ./release
          mkdir ./release/plugins
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            cp ./octa_plugin_shell.exe ./release/plugins
            cp ./octa_plugin_tpl.exe ./release/plugins
            cp octa.exe ./release

            7z a ../../../${{ matrix.platform.name }} ./release/*
          else
            cp ./octa_plugin_shell ./release/plugins
            cp ./octa_plugin_tpl ./release/plugins
            cp octa ./release

            tar czvf ../../../${{ matrix.platform.name }} -C ./release .
          fi
          cd -

      - name: Publish release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: octa-${{ matrix.platform.os_name }}
          path: "octa*"
        if: github.ref == 'refs/tags/test-release'

      - name: Publish GitHub release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          files: "octa-*"
          token: ${{ github.token }}
          body_path: Changelog.md
        if: startsWith( github.ref, 'refs/tags/v' )
